// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  location             String?
  buyingConversations  Conversation[]  @relation("buyingConvos")
  sellingConversations Conversation[]  @relation("sellingConvos")
  //Try to not include sentMessages, leaving it here for now just in case we need to make it a relation
  // sentMessages Messages[] @relation("sentMessages")
  listings             Listings[]
  purchasedListings    ActionListing[] @relation("listingsBought")
  soldListings         ActionListing[] @relation("listingsSold")
  // offers Offers[]
  favourites           Favourites[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//sender is the foreign key 
model Conversation {
  id        String     @id @default(uuid())
  buyerId   User       @relation("buyingConvos", fields: [buyer], references: [id])
  buyer     String
  sellerId  User       @relation("sellingConvos", fields: [seller], references: [id])
  seller    String
  messages  Messages[]
  createdAt DateTime   @default(now())
}

model Messages {
  id             String       @id @default(uuid())
  // senderId User @relation("sentMessages", fields: [sender],references: [id])
  // sender String
  senderId       String
  conversation   String
  conversationId Conversation @relation(fields: [conversation], references: [id])
}

model Listings {
  id              String        @id @default(uuid())
  ownerId         User          @relation(fields: [owner], references: [id])
  owner           String
  actionListing   ActionListing @relation(fields: [actionListingId], references: [id])
  actionListingId String        @unique
}

model ActionListing {
  id String @id @default(uuid())

  buyerId User   @relation("listingsBought", fields: [buyer], references: [id])
  buyer   String

  sellerId User   @relation("listingsSold", fields: [seller], references: [id])
  seller   String

  listingId Listings?

  price     Int
  createdAt DateTime @default(now())
}

model Offers {
  id String @id @default(uuid())
}

model Favourites {
  id        String @id @default(uuid())
  userId    User   @relation(fields: [user], references: [id])
  user      String
  listingId String
}
