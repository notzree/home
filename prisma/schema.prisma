generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String          @id @default(cuid())
  email                String?         @unique
  location             String?
  emailVerified        DateTime?
  image                String?
  name                 String?
  accounts             Account[]
  purchasedListings    ActionListing[] @relation("listingsBought")
  soldListings         ActionListing[] @relation("listingsSold")
  buyingConversations  Conversation[]  @relation("buyingConvos")
  sellingConversations Conversation[]  @relation("sellingConvos")
  favourites           Favourites[]
  listings             Listings[]
  sessions             Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id        String     @id @default(uuid())
  buyer     String
  seller    String
  createdAt DateTime   @default(now())
  buyerId   User       @relation("buyingConvos", fields: [buyer], references: [id])
  sellerId  User       @relation("sellingConvos", fields: [seller], references: [id])
  messages  Messages[]
}

model Messages {
  id             String       @id @default(uuid())
  senderId       String
  conversation   String
  conversationId Conversation @relation(fields: [conversation], references: [id])
}

model Listings {
  id              String        @id @default(uuid())
  owner           String
  actionListingId String        @unique
  actionListing   ActionListing @relation(fields: [actionListingId], references: [id])
  ownerId         User          @relation(fields: [owner], references: [id])
}

model ActionListing {
  id        String    @id @default(uuid())
  buyer     String
  seller    String
  price     Int
  createdAt DateTime  @default(now())
  buyerId   User      @relation("listingsBought", fields: [buyer], references: [id])
  sellerId  User      @relation("listingsSold", fields: [seller], references: [id])
  listingId Listings?
}

model Offers {
  id String @id @default(uuid())
}

model Favourites {
  id        String @id @default(uuid())
  user      String
  listingId String
  userId    User   @relation(fields: [user], references: [id])
}
